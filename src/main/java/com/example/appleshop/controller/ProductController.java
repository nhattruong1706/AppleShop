package com.example.appleshop.controller;

import com.example.appleshop.entity.Category;
import com.example.appleshop.entity.Product;
import com.example.appleshop.entity.ProductVariant;
import com.example.appleshop.repository.CategoryRepository;
import com.example.appleshop.service.CategoryService;
import com.example.appleshop.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/products")
@CrossOrigin(origins = "*")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;
    private final CategoryService categoryService;
    private final CategoryRepository  categoryRepository;
    // ðŸ”¹ ThÃªm sáº£n pháº©m (khÃ´ng kÃ¨m biáº¿n thá»ƒ)
    @PostMapping
    public ResponseEntity<?> createProduct(@RequestBody Map<String, Object> body) {
        try {
            Product product = new Product();
            product.setName((String) body.get("name"));
            product.setDescription((String) body.get("description"));
            product.setPrice(Double.valueOf(body.get("price").toString()));
            product.setStock(Integer.valueOf(body.get("stock").toString()));
            product.setImg((String) body.get("img"));

            // âœ… Láº¥y categoryId tá»« JSON (sá»­a kiá»ƒu Long â†’ Integer)
            if (body.get("categoryId") != null) {
                Integer categoryId = Integer.valueOf(body.get("categoryId").toString());
                Category category = categoryRepository.findById(categoryId)
                        .orElseThrow(() -> new RuntimeException("Category not found with id = " + categoryId));
                product.setCategory(category);
            }

            Product saved = productService.createProduct(product);
            return ResponseEntity.ok(saved);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("Lá»—i khi thÃªm sáº£n pháº©m: " + e.getMessage());
        }
    }



    // ðŸ”¹ Láº¥y táº¥t cáº£ sáº£n pháº©m
    @GetMapping
    public List<Product> getAllProducts() {
        return productService.getAllProducts();
    }

    // ðŸ”¹ Láº¥y chi tiáº¿t sáº£n pháº©m theo ID
    @GetMapping("/{id}")
    public ResponseEntity<?> getProductById(@PathVariable Long id) {
        try {
            Product product = productService.getProductById(id);
            return ResponseEntity.ok(product);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // ðŸ”¹ Cáº­p nháº­t sáº£n pháº©m
    @PutMapping("/{id}")
    public ResponseEntity<?> updateProduct(
            @PathVariable Long id,
            @RequestBody Product updatedProduct) {
        try {
            Product saved = productService.updateProduct(id, updatedProduct);
            return ResponseEntity.ok(saved);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lá»—i khi cáº­p nháº­t sáº£n pháº©m: " + e.getMessage());
        }
    }

    // ðŸ”¹ XÃ³a sáº£n pháº©m
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteProduct(@PathVariable Long id) {
        try {
            productService.deleteProduct(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lá»—i khi xÃ³a sáº£n pháº©m: " + e.getMessage());
        }
    }

    // =====================================================
    // ðŸ”¹ CÃ¡c API xá»­ lÃ½ biáº¿n thá»ƒ (ProductVariant)
    // =====================================================

    // ðŸ†• ThÃªm biáº¿n thá»ƒ cho sáº£n pháº©m theo productId
    @PostMapping("/{productId}/variants")
    public ResponseEntity<?> addVariantToProduct(
            @PathVariable Long productId,
            @RequestBody ProductVariant variantRequest) {
        try {
            ProductVariant savedVariant = productService.addVariant(productId, variantRequest);
            return ResponseEntity.ok(savedVariant);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lá»—i khi thÃªm biáº¿n thá»ƒ: " + e.getMessage());
        }
    }

    // ðŸ”¹ Láº¥y danh sÃ¡ch biáº¿n thá»ƒ theo sáº£n pháº©m
    @GetMapping("/{productId}/variants")
    public ResponseEntity<?> getVariantsByProduct(@PathVariable Long productId) {
        try {
            List<ProductVariant> variants = productService.getVariantsByProduct(productId);
            return ResponseEntity.ok(variants);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // ðŸ”¹ Cáº­p nháº­t biáº¿n thá»ƒ
    @PutMapping("/variants/{variantId}")
    public ResponseEntity<?> updateVariant(
            @PathVariable Long variantId,
            @RequestBody ProductVariant updatedVariant) {
        try {
            ProductVariant saved = productService.updateVariant(variantId, updatedVariant);
            return ResponseEntity.ok(saved);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lá»—i khi cáº­p nháº­t biáº¿n thá»ƒ: " + e.getMessage());
        }
    }

    // ðŸ”¹ XÃ³a biáº¿n thá»ƒ
    @DeleteMapping("/variants/{variantId}")
    public ResponseEntity<?> deleteVariant(@PathVariable Long variantId) {
        try {
            productService.deleteVariant(variantId);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Lá»—i khi xÃ³a biáº¿n thá»ƒ: " + e.getMessage());
        }
    }
}
